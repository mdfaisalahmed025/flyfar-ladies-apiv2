/// <reference types="multer" />
import { CreateInstallmentDto } from './dto/create-installment.dto';
import { TourpackageService } from './tourpackage.service';
import { UpdateTourpackageDto } from './dto/update-tourpackage.dto';
import { Request, Response } from 'express';
import { Tourpackage } from './entities/tourpackage.entity';
import { Repository } from 'typeorm';
import { AlbumImage } from './entities/albumimage.entity';
import { VisitedPlace } from './entities/visitedplace.entity';
import { CreateBookingPolicyDto } from './dto/creat-bookingpolicy.dto';
import { updateBookingPolicyDto } from './dto/update-bookingpolicy.dto';
import { createRefundPolicyDto } from './dto/create-refundpolicy.dto';
import { UpdateRefundPolicy } from './dto/update-refundpolicy.dto';
import { createpackageincluionDto } from './dto/create-packageInclusion.dto';
import { updatepackageInclusionDto } from './dto/update-packageincluion.dto';
import { CreateTourPackagePlanDto } from './dto/create-packagetourplan.dto';
import { updateTourPackagePlanDto } from './dto/update-tourpackageplan.dto';
import { CreatepackageExclsuionsDto } from './dto/create-packageexclusions.dto';
import { updatepackageExclusionsDto } from './dto/update-packageexclsuions.dto';
import { CreatePackageHighlightDto } from './dto/create-packagehighlights.dto';
import { UpdatepackageHighlightDto } from './dto/update-packagehighlightdto';
import { MainImage } from './entities/mainimage.entity';
import { S3Service } from 'src/s3/s3.service';
import { updateinstallmentdto } from './dto/update-installmentDto';
export declare class TourpackageController {
    private TourpackageRepo;
    private MainImageRepo;
    private AlbumimageRepo;
    private visitedplaceRepo;
    private readonly tourpackageService;
    private s3service;
    constructor(TourpackageRepo: Repository<Tourpackage>, MainImageRepo: Repository<MainImage>, AlbumimageRepo: Repository<AlbumImage>, visitedplaceRepo: Repository<VisitedPlace>, tourpackageService: TourpackageService, s3service: S3Service);
    AddTravelPAckage(file: Express.Multer.File, req: Request, body: any, res: Response): Promise<Response<any, Record<string, any>>>;
    FindAll(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    findOne(id: string): Promise<Tourpackage>;
    findOneBytriptype(TripType: string): Promise<{
        name: string;
    }[]>;
    getTourPackages(TripType: string, City: string, StartDate: string): Promise<Tourpackage[]>;
    update(id: number, req: Request, res: Response, body: any, updateTourpackageDto: UpdateTourpackageDto): Promise<Response<any, Record<string, any>>>;
    updateImageUrl(file: Express.Multer.File, Id: number, bodyParser: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    createInstallment(Id: number, res: Response, installmentDto: CreateInstallmentDto[]): Promise<Response<any, Record<string, any>>>;
    GetInstallment(id: number, InstallmentId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateInstallment(id: number, InstallmentId: number, updateinstall: updateinstallmentdto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteInstallment(id: number, InstallmentId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    remove(id: string, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    AddmainImages(files: Express.Multer.File[], Id: number, req: Request, res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    addTourPackageBookingPolicy(id: number, bookingpolicydto: CreateBookingPolicyDto[], req: Request, res: Response): Response<any, Record<string, any>>;
    getsingleBookingPolicy(id: number, BkId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateBookingPolicy(id: number, BkId: number, updatebookingpolicyDto: updateBookingPolicyDto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteBookingPolicy(id: number, BkId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    addrefundPolicy(id: number, refundpolicydto: createRefundPolicyDto[], req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getsinglerefundPolicy(id: number, RId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateRefundPolicy(id: number, RId: number, updateRefundlicyDto: UpdateRefundPolicy, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteRefundPolicy(id: number, RId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    addInclusion(id: number, Inclusionsdto: createpackageincluionDto[], req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getsingleInclsuions(id: number, InId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateInclsuions(id: number, InId: number, updateInclusionsDto: updatepackageInclusionDto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteExcluions(id: number, InId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getAllBumImage(id: number, AlbumTitle: string, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateAlbumImageUrl(files: Express.Multer.File[], Id: number, AlbumId: number, bodyParser: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateMainImageUrl(files: Express.Multer.File[], Id: number, mainimgId: number, bodyParser: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateVistedImageUrl(files: Express.Multer.File[], Id: number, VimageId: number, bodyParser: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getAllAlbumImage(id: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getAllmainImage(id: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    AddalbumImages(files: Express.Multer.File[], Id: number, req: Request, res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    AddvistitedImages(files: Express.Multer.File[], Id: number, req: Request, res: Response, body: any): Promise<Response<any, Record<string, any>>>;
    getAllvisitedImage(id: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    addTourPackagePlan(id: number, tourpackagePlandto: CreateTourPackagePlanDto[], req: Request, res: Response): Response<any, Record<string, any>>;
    getdayplan(id: number, dayId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updatePackageplan(id: number, dayId: number, updatedayplanDto: updateTourPackagePlanDto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteDay(id: number, dayId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    addTourPackageExclusions(id: number, packageexcluionsdto: CreatepackageExclsuionsDto[], req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getPackageExclsuions(id: number, ExId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateExlsuions(id: number, ExId: number, updateExclusionsDto: updatepackageExclusionsDto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteIncluions(id: number, ExId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    addTourPackageHighlight(id: number, packageHighlightdto: CreatePackageHighlightDto[], req: Request, res: Response): Response<any, Record<string, any>>;
    getPackageHighlight(id: number, HiId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    updateHiId(id: number, HiId: number, updatehighlightDto: UpdatepackageHighlightDto, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    DeleteHighlight(id: number, HiId: number, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
}
