import { Repository } from 'typeorm';
import { CreateBookingPolicyDto } from './dto/creat-bookingpolicy.dto';
import { CreatepackageExclsuionsDto } from './dto/create-packageexclusions.dto';
import { CreatePackageHighlightDto } from './dto/create-packagehighlights.dto';
import { createpackageincluionDto } from './dto/create-packageInclusion.dto';
import { CreateTourPackagePlanDto } from './dto/create-packagetourplan.dto';
import { createRefundPolicyDto } from './dto/create-refundpolicy.dto';
import { updateBookingPolicyDto } from './dto/update-bookingpolicy.dto';
import { updatepackageExclusionsDto } from './dto/update-packageexclsuions.dto';
import { UpdatepackageHighlightDto } from './dto/update-packagehighlightdto';
import { updatepackageInclusionDto } from './dto/update-packageincluion.dto';
import { UpdateRefundPolicy } from './dto/update-refundpolicy.dto';
import { UpdateTourpackageDto } from './dto/update-tourpackage.dto';
import { updateTourPackagePlanDto } from './dto/update-tourpackageplan.dto';
import { AlbumImage } from './entities/albumimage.entity';
import { bookingpolicy } from './entities/bookingpolicy.entity';
import { MainImage } from './entities/mainimage.entity';
import { packageexcluions } from './entities/packageexclsuions.entity';
import { packagehighlight } from './entities/packagehighlight.entity';
import { Packageinclusion } from './entities/packageInclusion.entitry';
import { refundpolicy } from './entities/refundpolicy.entity';
import { Tourpackage } from './entities/tourpackage.entity';
import { tourpackageplan } from './entities/tourpackageplan.entity';
import { VisitedPlace } from './entities/visitedplace.entity';
import { CreateInstallmentDto } from './dto/create-installment.dto';
import { Installment } from './entities/installment.entity';
import { updateinstallmentdto } from './dto/update-installmentDto';
export declare class TourpackageService {
    private TourpackageRepo;
    private packageInclusionRepo;
    private tourpackagePlanRepo;
    private packageexcluionsRepo;
    private packageHighlightRepo;
    private bookingPolicyRepo;
    private refundPolicyRepo;
    private InstallmentRepo;
    private AlbumImageRepo;
    private MainImageRepo;
    private visitedImageRepo;
    constructor(TourpackageRepo: Repository<Tourpackage>, packageInclusionRepo: Repository<Packageinclusion>, tourpackagePlanRepo: Repository<tourpackageplan>, packageexcluionsRepo: Repository<packageexcluions>, packageHighlightRepo: Repository<packagehighlight>, bookingPolicyRepo: Repository<bookingpolicy>, refundPolicyRepo: Repository<refundpolicy>, InstallmentRepo: Repository<Installment>, AlbumImageRepo: Repository<AlbumImage>, MainImageRepo: Repository<MainImage>, visitedImageRepo: Repository<VisitedPlace>);
    findOne(Id: number): Promise<Tourpackage>;
    FindAllPackages(): Promise<Tourpackage[]>;
    GetTourpackageByDiffirentfield(TripType: string, City: string, StartDate: string): Promise<Tourpackage[]>;
    getCityByTripType(TripType: string): Promise<{
        name: string;
    }[]>;
    updatePackage(Id: number, updateTourpackageDto: UpdateTourpackageDto): Promise<import("typeorm").UpdateResult>;
    remove(Id: number): Promise<import("typeorm").DeleteResult>;
    FindAlbum(Id: number, AlbumTitle: string): Promise<AlbumImage[]>;
    FindAllAlbum(Id: number): Promise<AlbumImage[]>;
    AllMainImage(Id: number): Promise<MainImage[]>;
    FindAllvisitedImage(Id: number): Promise<VisitedPlace[]>;
    createbookingPolicy(Id: number, CreateBookingPolicyDto: CreateBookingPolicyDto[]): Promise<bookingpolicy[]>;
    AddInstallment(Id: number, CreateInstallmentDto: CreateInstallmentDto[]): Promise<Installment[]>;
    FindInstallment(Id: number, InstallmentId: number): Promise<Installment>;
    updateInstallment(Id: number, InstallmentId: number, updateinstall: updateinstallmentdto): Promise<import("typeorm").UpdateResult>;
    DeleteInstallment(Id: number, InstallmentId: number): Promise<void>;
    FindbookingPolicy(Id: number, BkId: number): Promise<bookingpolicy>;
    updateBookingolicy(Id: number, BkId: number, updateBOokingPolicy: updateBookingPolicyDto): Promise<import("typeorm").UpdateResult>;
    DeletebookingPolicy(Id: number, BkId: number): Promise<void>;
    AddRefundPolicy(Id: number, RefundpolicyDto: createRefundPolicyDto[]): Promise<refundpolicy[]>;
    FindRefundPolicy(Id: number, RId: number): Promise<refundpolicy>;
    updateRefundolicy(Id: number, RId: number, updaterefundPolicy: UpdateRefundPolicy): Promise<import("typeorm").UpdateResult>;
    DeleterefundPolicy(Id: number, RId: number): Promise<void>;
    AddInclusions(Id: number, inclusionsDto: createpackageincluionDto[]): Promise<Packageinclusion[]>;
    FindInclsuions(Id: number, InId: number): Promise<Packageinclusion>;
    updateInclusions(Id: number, InId: number, updateInclusionsDto: updatepackageInclusionDto): Promise<import("typeorm").UpdateResult>;
    DeleteInclusion(Id: number, InId: number): Promise<void>;
    AddpackageExclsuions(Id: number, exclusionDto: CreatepackageExclsuionsDto[]): Promise<packageexcluions[]>;
    FindExclsuions(Id: number, ExId: number): Promise<packageexcluions>;
    updateExclusions(Id: number, ExId: number, updateExlusionsDto: updatepackageExclusionsDto): Promise<import("typeorm").UpdateResult>;
    DeleteIExclusion(Id: number, ExId: number): Promise<void>;
    AddTourpackagePlan(Id: number, tourPackageplanDto: CreateTourPackagePlanDto[]): Promise<tourpackageplan[]>;
    Finddayplan(Id: number, dayId: number): Promise<tourpackageplan>;
    updatedayplan(Id: number, dayId: number, updatedayplanDto: updateTourPackagePlanDto): Promise<import("typeorm").UpdateResult>;
    DeleteIdayplan(Id: number, dayId: number): Promise<void>;
    AddPackageHighlight(Id: number, packageHighlightDto: CreatePackageHighlightDto[]): Promise<packagehighlight[]>;
    FindHighlight(Id: number, HiId: number): Promise<packagehighlight>;
    updateHighlight(Id: number, HiId: number, updateHighlightDto: UpdatepackageHighlightDto): Promise<import("typeorm").UpdateResult>;
    DeleteHighlight(Id: number, HiId: number): Promise<void>;
}
